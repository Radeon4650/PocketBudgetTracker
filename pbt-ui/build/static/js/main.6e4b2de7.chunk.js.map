{"version":3,"sources":["user/login-form.js","user/login-provider.js","budget/budget-page.js","budget/add-budget-entry-form.js","budget/budgets-provider.js","App.js","serviceWorker.js","index.js"],"names":["LoginForm","_ref","onLoginClick","onUserCreateClick","onUserNameChange","onEmailChange","onPasswordChange","react_default","a","createElement","Segment","placeholder","Grid","columns","stackable","textAlign","Divider","vertical","Row","verticalAlign","Column","Header","icon","Icon","name","Form","onSubmit","Field","Input","onChange","Button","type","LoginProvider","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","loggedIn","undefined","username","email","pass","onLoggedIn","onLoggedOut","logIn","bind","assertThisInitialized","createUser","getCurrentUser","_this2","fetch","redirect","then","response","json","body","console","log","setState","catch","err","_this3","data","login","password","options","method","headers","Content-type","JSON","stringify","blob","error","_this4","_this5","login_form","e","value","defineProperty","_ref2","_ref3","Component","BudgetPage","budgets","categories","map","category","Table","key","id","celled","HeaderCell","colSpan","Body","items","item","Cell","date","title","concat","amount","currency","AddBudgetEntryForm","onValueChange","color","size","Group","inline","BudgetsPovider","getBudgets","addEntry","valueChange","res","Date","toISOString","add_budget_entry_form","budget_page","App","logOut","logOutButton","inverted","labelPosition","onClick","Menu","fixed","position","Item","Container","style","marginTop","marginBottom","budgets_provider","login_provider","userInfo","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6e4b2de7.chunk.js","sourcesContent":["import React from 'react';\nimport { Button, Header, Icon, Segment, Grid, Divider, Form } from 'semantic-ui-react';\n\nfunction LoginForm({ onLoginClick, onUserCreateClick, onUserNameChange, onEmailChange, onPasswordChange }) {\n    return (\n        //         loginForm() {\n        //     if (this.state.loggedIn === undefined) {\n        //         return <h5>Loading...</h5>;\n        //     }\n\n        //     return (\n\n        //     );\n        // }\n        <Segment placeholder>\n            <Grid columns={2} stackable textAlign=\"center\">\n                <Divider vertical>Or</Divider>\n\n                <Grid.Row verticalAlign=\"middle\">\n                    <Grid.Column>\n                        <Header icon>\n                            <Icon name=\"sign in\" />\n                            Log In\n                        </Header>\n                        <Form onSubmit={onLoginClick}>\n                            <Form.Field>\n                                <label>User Email</label>\n                                <Form.Input name=\"email\" placeholder=\"User Email\" onChange={onUserNameChange} />\n                            </Form.Field>\n                            <Form.Field>\n                                <label>Password</label>\n                                <Form.Input name=\"pass\" placeholder=\"Password\" onChange={onPasswordChange} />\n                            </Form.Field>\n                            <Button type=\"submit\">Log in</Button>\n                        </Form>\n                    </Grid.Column>\n\n                    <Grid.Column>\n                        <Header icon>\n                            <Icon name=\"user\" />\n                            Create a new user\n                        </Header>\n                        <Form onSubmit={onUserCreateClick}>\n                            <Form.Field>\n                                <label>User Name</label>\n                                <Form.Input name=\"username\" placeholder=\"User Name\" onChange={onUserNameChange} />\n                            </Form.Field>\n                            <Form.Field>\n                                <label>Email</label>\n                                <Form.Input name=\"email\" placeholder=\"User Email\" onChange={onEmailChange} />\n                            </Form.Field>\n                            <Form.Field>\n                                <label>Password</label>\n                                <Form.Input name=\"pass\" placeholder=\"Password\" onChange={onPasswordChange} />\n                            </Form.Field>\n                            <Button type=\"submit\">Create</Button>\n                        </Form>\n                    </Grid.Column>\n                </Grid.Row>\n            </Grid>\n        </Segment>\n    );\n}\n\nexport default LoginForm;\n","import React, { Component } from 'react';\nimport LoginForm from './login-form';\n\nclass LoginProvider extends Component {\n    state = {\n        loggedIn: undefined,\n        username: undefined,\n        email: undefined,\n        pass: undefined\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.onLoggedIn = props.onLoggedIn;\n        this.onLoggedOut = props.onLoggedOut;\n\n        this.logIn = this.logIn.bind(this);\n        this.createUser = this.createUser.bind(this);\n        this.getCurrentUser = this.getCurrentUser.bind(this);\n    }\n\n    componentDidMount() {\n        this.getCurrentUser();\n    }\n\n    getCurrentUser() {\n        fetch('/api/auth/login', { redirect: 'error' })\n            .then(response => response.json())\n            .then(body => {\n                console.log(body);\n                this.setState(\n                    {\n                        loggedIn: true,\n                        email: body.username\n                    },\n                    () => this.onLoggedIn(body)\n                );\n            })\n            .catch(err => {\n                console.log(err);\n                this.setState({ loggedIn: false }, () => this.onLoggedOut());\n            });\n    }\n\n    logIn() {\n        const data = {\n            login: this.state.email,\n            password: this.state.pass\n        };\n        const options = {\n            method: 'post',\n            headers: { 'Content-type': 'application/json; charset=UTF-8' },\n            redirect: 'error',\n            body: JSON.stringify(data)\n        };\n        fetch('/api/auth/login', options)\n            .then(response => response.blob())\n            .then(body => {\n                console.log(body);\n                this.getCurrentUser();\n            })\n            .catch(err => {\n                console.error(err);\n                this.getCurrentUser();\n            });\n    }\n\n    createUser() {\n        const data = {\n            username: this.state.username,\n            email: this.state.email,\n            password: this.state.pass\n        };\n        const options = {\n            method: 'post',\n            headers: { 'Content-type': 'application/json; charset=UTF-8' },\n            body: JSON.stringify(data)\n        };\n        fetch('/api/auth/create', options)\n            .then(response => response.blob())\n            .then(body => {\n                console.log(body);\n                this.logIn();\n            })\n            .catch(err => {\n                console.error(err);\n                this.setState({ loggedIn: false });\n            });\n    }\n\n    render() {\n        return (\n            <LoginForm\n                onLoginClick={this.logIn}\n                onUserCreateClick={this.createUser}\n                onUserNameChange={(e, { name, value }) => this.setState({ [name]: value })}\n                onEmailChange={(e, { name, value }) => this.setState({ [name]: value })}\n                onPasswordChange={(e, { name, value }) => this.setState({ [name]: value })}\n            />\n        );\n    }\n}\n\nexport default LoginProvider;\n","import React, { Component } from 'react';\nimport { Table } from 'semantic-ui-react';\n\nfunction BudgetPage(budgets) {\n    return (\n        <div>\n            {!budgets.budgets.categories ? (\n                <pre>You have no entries in your budget</pre>\n            ) : (\n                budgets.budgets.categories.map(category => (\n                    <Table key={category.id} celled>\n                        <Table.Header>\n                            <Table.Row>\n                                <Table.HeaderCell textAlign=\"center\" colSpan=\"4\">\n                                    {category.name}\n                                </Table.HeaderCell>\n                            </Table.Row>\n                            <Table.Row>\n                                <Table.HeaderCell>Number</Table.HeaderCell>\n                                <Table.HeaderCell>Date</Table.HeaderCell>\n                                <Table.HeaderCell>Title</Table.HeaderCell>\n                                <Table.HeaderCell>Amount</Table.HeaderCell>\n                            </Table.Row>\n                        </Table.Header>\n                        <Table.Body>\n                            {category.items.map(item => (\n                                <Table.Row key={item.id}>\n                                    <Table.Cell>{item.id}</Table.Cell>\n                                    <Table.Cell>{item.date}</Table.Cell>\n                                    <Table.Cell>{item.title}</Table.Cell>\n                                    <Table.Cell>{`${item.amount}  ${item.currency}`}</Table.Cell>\n                                </Table.Row>\n                            ))}\n                        </Table.Body>\n                    </Table>\n                ))\n            )}\n        </div>\n    );\n}\n\nexport default BudgetPage;\n","import React, { Component } from 'react';\nimport { Table, Button, Header, Icon, Segment, Grid, Divider, Form } from 'semantic-ui-react';\n\nfunction AddBudgetEntryForm({ onValueChange, onSubmit }) {\n    return (\n        <Segment color=\"olive\">\n            <h3>Add entry</h3>\n            <Form size=\"mini\" onSubmit={onSubmit}>\n                <Form.Group inline>\n                    <Form.Field>\n                        <Form.Input name=\"category\" placeholder=\"Enter category\" onChange={onValueChange} />\n                    </Form.Field>\n                    <Form.Field>\n                        <Form.Input name=\"title\" placeholder=\"Enter title\" onChange={onValueChange} />\n                    </Form.Field>\n                    <Form.Field>\n                        <Form.Input name=\"amount\" placeholder=\"Enter amount\" onChange={onValueChange} />\n                    </Form.Field>\n                    <Form.Field>\n                        <Form.Button type=\"submit\">Submit</Form.Button>\n                    </Form.Field>\n                </Form.Group>\n            </Form>\n        </Segment>\n    );\n}\n\nexport default AddBudgetEntryForm;\n","import React, { Component } from 'react';\nimport BudgetPage from './budget-page';\nimport AddBudgetEntryForm from './add-budget-entry-form';\n\nclass BudgetsPovider extends Component {\n    state = {\n        category: undefined,\n        date: undefined,\n        title: undefined,\n        amount: undefined,\n        currency: 'UAH',\n        budgets: []\n    };\n\n    componentDidMount() {\n        this.getBudgets();\n        this.addEntry = this.addEntry.bind(this);\n        this.valueChange = this.valueChange.bind(this);\n    }\n\n    getBudgets() {\n        fetch('/api/budget')\n            .then(res => res.json())\n            .then(data => {\n                console.log(data);\n                this.setState({ budgets: data });\n            })\n            .catch(err => {\n                console.log(err);\n            });\n    }\n\n    addEntry() {\n        console.log(this.state);\n        const data = {\n            category: this.state.category,\n            date: new Date().toISOString(),\n            title: this.state.title,\n            amount: this.state.amount,\n            currency: this.state.currency\n        };\n        const options = {\n            method: 'post',\n            headers: { 'Content-type': 'application/json; charset=UTF-8' },\n            body: JSON.stringify(data)\n        };\n        fetch('/api/budget', options)\n            .then(response => response.blob())\n            .then(body => {\n                console.log(body);\n                this.getBudgets();\n            })\n            .catch(err => {\n                console.error(err);\n            });\n    }\n\n    valueChange(e, { name, value }) {\n        this.setState({ [name]: value });\n    }\n\n    render() {\n        return (\n            <div>\n                <AddBudgetEntryForm onValueChange={this.valueChange} onSubmit={this.addEntry} />\n                <BudgetPage budgets={this.state.budgets} />\n            </div>\n        );\n    }\n}\n\nexport default BudgetsPovider;\n","import React, { Component } from 'react';\nimport './App.css';\nimport 'semantic-ui-css/semantic.min.css';\nimport { Container, Menu, Button, Icon } from 'semantic-ui-react';\nimport LoginProvider from './user/login-provider';\nimport BudgetsPovider from './budget/budgets-provider';\n\nclass App extends Component {\n    state = {\n        loggedIn: undefined,\n        username: undefined,\n        email: undefined,\n        pass: undefined\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.logOut = this.logOut.bind(this);\n    }\n\n    logOut() {\n        console.log('Logging out');\n        fetch('/api/auth/logout')\n            .then(response => response.blob())\n            .then(body => {\n                console.log(body);\n                this.setState({ loggedIn: false, username: undefined, pass: undefined });\n            })\n            .catch(err => {\n                console.error(err);\n            });\n    }\n\n    render() {\n        const { loggedIn } = this.state;\n        const logOutButton = (\n            <Button inverted color=\"red\" icon labelPosition=\"right\" onClick={this.logOut}>\n                Log Out\n                <Icon name=\"sign out\" />\n            </Button>\n        );\n        return (\n            <div>\n                <Menu fixed=\"top\" inverted>\n                    <Menu.Menu />\n                    <Menu.Menu position=\"right\">\n                        {this.state.loggedIn && <Menu.Item>{logOutButton}</Menu.Item>}\n                    </Menu.Menu>\n                </Menu>\n\n                <Container style={{ marginTop: '5em', marginBottom: '5em' }}>\n                    {loggedIn ? (\n                        <div>\n                            <h1>Hello {this.state.username}</h1>\n                            <BudgetsPovider />\n                        </div>\n                    ) : (\n                        <LoginProvider\n                            onLoggedIn={userInfo => {\n                                console.log('Logged In: ', userInfo);\n                                this.setState({\n                                    loggedIn: true,\n                                    username: userInfo.username\n                                });\n                            }}\n                            onLoggedOut={() => {\n                                console.log('Logged out...');\n                                this.setState({ loggedIn: false });\n                            }}\n                        />\n                    )}\n                </Container>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit http://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            if (response.status === 404 || response.headers.get('content-type').indexOf('javascript') === -1) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.');\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}